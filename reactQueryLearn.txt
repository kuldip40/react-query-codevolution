- Fetching Data
-> useQuery - data fetcing
-> useMutation - create, update, delete data

=> useQuery() :-
arg_1 - "UNIQUE_KEY"
arg_2 - function that returns promise
arg_3 - {}
-> cacheTime:- in ms(miliseconds), default is 5 minutes

-> staleTime :- in ms(miliseconds), default is 0 seconds
	- When data is not changed and we don't need to call api again
	- it will call api after ms
	- still it shows old data
	- with this we can redude no. of network request

-> refetchOnMount: true //default
	- Query will refetch on mount if data is stale
	- false : Query data will not refetch
	- "always" : Query will refetch on mount if data is in stale or not

-> refetchOnWindowFocus:
	- true : When window loses focus & focus again data is fetch in background
	- false : Query will not refetch on window focus when loses focus
	- "always" : always fetch data whether query data is stale or not

-> refetchInterval :false //default
	- time in miliseconds : continuous refetch query at that interval
	- automatic refetching is paused if the window loses focus

-> refetchIntervalInBackground : true
	- continuous fetch data even browser is not in focus

-> enabled : false
	- data will not fetch when component is mount or browser is focus

-> onSuccess: (data)=>{ }
	- call this function when api successfull get
	- inside this function we can use sideEffects

-> onError: (error)=>{ }
	- call this function when api failed get
	- inside this function we can use sideEffects

-> select: (data)=>{ }
	- Transform data the coming from api


=> Query By Id :-
useQuery(key,function)
key - ["UNIQUE_KEY",UNIQUE_ID]
function - ()=>{}

=> Paralled Query
- if we call multiple query that all query call all api in parallel.

=> Dynamic Parallel Query
Ex:- Find super heroes dynamic parallel
heroIds : [1,3]
const queryResults = useQueries(heroIds.map(id=>{
				  return {
				    queryKey: ["UNIQUE_KEY",id],
				    queryFn: ()=>{}
				  }
				}))
queryResults is array of all query

=> Dependent Queries
One Qurey depend on result of another query
Ex:-
const {data} = useQuery("UNIQUE_KEY",()=>{})
const id = data?.data?.id
useQuery("UIQUE_KEY", ()=>{}, {enabled:!!id})

=> Infinite Query :- useInfiniteQuery hook

=> useMutation() :-
const {mutate} = useMutation(arg_1, arg_2)
arg_1 - function that call api and pass data,
	(data)=>{} //automatically receive any argument when we invoke the mutate function
mutate(PASS_DATA)

arg_2 : {}
-> onSuccess:()=>{}
	1). This helps when we need to call fetch api after success mutation
	Ex:- const queryClient = useQueryClient()
	const {mutate} = useMutation((data)=>{},{
	  onSuccess:()=>{
	    queryClient.invalidateQueries("UNIQUE_KEY") //UNIQUE_KEY is useQuery Query key that api need to call
	  }
	})
	mutate(PASS_DATA_HERE)
	2). Insted of fetching data after update, we can take advantage of the object return by mutation function & imidiate update existing query with the new data.
	- This helps because data will return new created data object.
	Ex:- const queryClient = useQueryClient()
	const {mutate} = useMutation((data)=>{},{
	  onSuccess:(data)=>{ //data is return by api after success full updation
	    queryClient.setQueriesData("UNIQUE_KEY",oldQueryData => {	//UNIQUE_KEY is useQuery query key that we need to add new data, oldQueryData is that query data
	      return {
		...oldQueryData,
		data:[...oldQueryData.data, data.data]
	      }
	    })
	  }
	})
	mutate(PASS_DATA_HERE)